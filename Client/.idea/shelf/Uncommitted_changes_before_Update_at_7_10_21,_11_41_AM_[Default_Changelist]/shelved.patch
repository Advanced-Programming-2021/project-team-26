Index: src/main/java/fxmlController/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fxmlController;\n\nimport Utilities.Alert;\nimport controller.*;\nimport javafx.animation.SequentialTransition;\nimport javafx.animation.TranslateTransition;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.geometry.Pos;\nimport javafx.scene.Node;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.ProgressBar;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseButton;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.text.Text;\nimport javafx.stage.Stage;\nimport model.CardAddress;\nimport model.Owner;\nimport model.Place;\nimport model.cards.Card;\nimport model.cards.SpellTrap;\nimport model.cards.monster.Monster;\n\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.ResourceBundle;\n\npublic class GameView implements Initializable {\n\n    public static final String MY_PHASE_STYLE = \"-fx-background-color: #3ba8e2;\";\n    public static final String OPPONENT_PHASE_STYLE = \"-fx-background-color: #e01313;\";\n    public static final String MY_CURRENT_PHASE_STYLE = \"-fx-background-color: #3ba8e2;-fx-border-color: #001a82; -fx-border-width: 5\";\n    public static final String OPPONENT_CURRENT_PHASE_STYLE = \"-fx-background-color: #e01313;-fx-border-color: #570000; -fx-border-width: 5\";\n    private final ArrayList<ImageView> myMonsters = new ArrayList<>();\n    private final ArrayList<ImageView> mySpellTraps = new ArrayList<>();\n    private final ArrayList<ImageView> oppMonsters = new ArrayList<>();\n    private final ArrayList<ImageView> oppSpellTraps = new ArrayList<>();\n    private final GameController gameController;\n    private final int turn;\n    public Button drawPhaseBut;\n    public Button standbyPhaseBut;\n    public Button mainPhase1But;\n    public Button battlePhaseBut;\n    public Button mainPhase2But;\n    public Button endPhaseBut;\n    public ImageView cardInfo;\n    public TextArea cardDetails;\n\n    @FXML\n    private AnchorPane root;\n\n    @FXML\n    private ImageView opoSpellTrap4;\n\n    @FXML\n    private ImageView opoSpellTrap2;\n\n    @FXML\n    private ImageView opoSpellTrap1;\n\n    @FXML\n    private ImageView opoSpellTrap3;\n\n    @FXML\n    private ImageView opoSpellTrap5;\n\n    @FXML\n    private ImageView oppMonster5;\n\n    @FXML\n    private ImageView oppMonster3;\n\n    @FXML\n    private ImageView oppMonster1;\n\n    @FXML\n    private ImageView oppMonster2;\n\n    @FXML\n    private ImageView oppMonster4;\n\n    @FXML\n    private ImageView myMonster5;\n\n    @FXML\n    private ImageView myMonster3;\n\n    @FXML\n    private ImageView myMonster1;\n\n    @FXML\n    private ImageView myMonster2;\n\n    @FXML\n    private ImageView myMonster4;\n\n    @FXML\n    private ImageView mySpellTrap5;\n\n    @FXML\n    private ImageView mySpellTrap3;\n\n    @FXML\n    private ImageView mySpellTrap1;\n\n    @FXML\n    private ImageView mySpellTrap2;\n\n    @FXML\n    private ImageView mySpellTrap4;\n\n    @FXML\n    private ProgressBar opponentLPProgress;\n\n    @FXML\n    private ProgressBar myLPProgress;\n\n    @FXML\n    private ImageView opponentProfile;\n\n    @FXML\n    private ImageView myProfile;\n\n    @FXML\n    private Text myUsername;\n\n    @FXML\n    private Text myNickname;\n\n    @FXML\n    private Text opponentNickname;\n\n    @FXML\n    private Text opponentUsername;\n\n    @FXML\n    private Text opponentLP;\n\n    @FXML\n    private Text myLP;\n\n    @FXML\n    private GridPane opponentHand;\n\n    @FXML\n    private GridPane myHand;\n\n    @FXML\n    private ImageView myDeckImage;\n\n    private int attacker = -1;\n\n    public GameView(GameController controller, int turn) {\n        this.gameController = controller;\n        this.turn = turn;\n    }\n\n    public void updatePhase() {\n        if (gameController.getGame().getTurn() != turn) {\n            updatePhaseOpponent();\n            return;\n        }\n\n        standbyPhaseBut.setStyle(MY_PHASE_STYLE);\n        drawPhaseBut.setStyle(MY_PHASE_STYLE);\n        mainPhase1But.setStyle(MY_PHASE_STYLE);\n        battlePhaseBut.setStyle(MY_PHASE_STYLE);\n        mainPhase2But.setStyle(MY_PHASE_STYLE);\n        endPhaseBut.setStyle(MY_PHASE_STYLE);\n\n        Phase phase = gameController.getGame().getPhase();\n        boolean found = false;\n        if (Phase.STANDBY.compareTo(phase) == 0) {\n            found = true;\n            standbyPhaseBut.setOnAction(null);\n            standbyPhaseBut.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            standbyPhaseBut.setOnAction(null);\n        if (Phase.DRAW.compareTo(phase) == 0) {\n            found = true;\n            drawPhaseBut.setOnAction(null);\n            drawPhaseBut.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else {\n            drawPhaseBut.setOnAction(found ? this::drawPhase : null);\n        }\n        if (Phase.MAIN1.compareTo(phase) == 0) {\n            found = true;\n            mainPhase1But.setOnAction(null);\n            mainPhase1But.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            mainPhase1But.setOnAction(found ? this::mainPhase1 : null);\n        if (Phase.BATTLE.compareTo(phase) == 0) {\n            found = true;\n            battlePhaseBut.setOnAction(null);\n            battlePhaseBut.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            battlePhaseBut.setOnAction(found ? this::battlePhase : null);\n        if (Phase.MAIN2.compareTo(phase) == 0) {\n            found = true;\n            mainPhase2But.setOnAction(null);\n            mainPhase2But.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            mainPhase2But.setOnAction(found ? this::mainPhase2 : null);\n        if (Phase.END.compareTo(phase) == 0) {\n            endPhaseBut.setOnAction(null);\n            endPhaseBut.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            endPhaseBut.setOnAction(found ? this::endPhase : null);\n    }\n\n\n    private void updatePhaseOpponent() {\n        standbyPhaseBut.setStyle(OPPONENT_PHASE_STYLE);\n        drawPhaseBut.setStyle(OPPONENT_PHASE_STYLE);\n        mainPhase1But.setStyle(OPPONENT_PHASE_STYLE);\n        battlePhaseBut.setStyle(OPPONENT_PHASE_STYLE);\n        mainPhase2But.setStyle(OPPONENT_PHASE_STYLE);\n        endPhaseBut.setStyle(OPPONENT_PHASE_STYLE);\n\n        standbyPhaseBut.setOnAction(null);\n        drawPhaseBut.setOnAction(null);\n        mainPhase1But.setOnAction(null);\n        battlePhaseBut.setOnAction(null);\n        mainPhase2But.setOnAction(null);\n        endPhaseBut.setOnAction(null);\n\n        switch (gameController.getGame().getPhase()) {\n            case DRAW:\n                drawPhaseBut.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case STANDBY:\n                standbyPhaseBut.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case MAIN1:\n                mainPhase1But.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case BATTLE:\n                battlePhaseBut.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case MAIN2:\n                mainPhase2But.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case END:\n                endPhaseBut.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n        }\n    }\n\n    @FXML\n    public void drawPhase(ActionEvent event) {\n        gameController.nextPhase(Phase.DRAW);\n    }\n\n    @FXML\n    void standbyPhase(ActionEvent event) {\n        gameController.nextPhase(Phase.STANDBY);\n    }\n\n    @FXML\n    void mainPhase1(ActionEvent event) {\n        gameController.nextPhase(Phase.MAIN1);\n    }\n\n    @FXML\n    void battlePhase(ActionEvent event) {\n        gameController.nextPhase(Phase.BATTLE);\n    }\n\n    @FXML\n    void mainPhase2(ActionEvent event) {\n        gameController.nextPhase(Phase.MAIN2);\n    }\n\n    @FXML\n    void endPhase(ActionEvent event) {\n        gameController.nextPhase(Phase.END);\n    }\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        myLP.setText(String.valueOf(gameController.getGame().getLifePoint(turn)));\n        myNickname.setText(gameController.getGame().getUser(turn).getNickname());\n        myProfile.setImage(gameController.getGame().getUser(turn).getProfileImage());\n        myUsername.setText(gameController.getGame().getUser(turn).getUsername());\n\n        opponentLP.setText(String.valueOf(gameController.getGame().getLifePoint(1 - turn)));\n        opponentNickname.setText(gameController.getGame().getUser(1 - turn).getNickname());\n        opponentProfile.setImage(gameController.getGame().getUser(1 - turn).getProfileImage());\n        opponentUsername.setText(gameController.getGame().getUser(1 - turn).getUsername());\n\n        initField();\n        intiFieldClick();\n    }\n\n    private void intiFieldClick() {\n        for (int i = 0; i < 5; i++) {\n            int finalI = i;\n            myMonsters.get(i).setOnMouseClicked(e -> {\n                if (myMonsters.get(finalI).getImage() == null)\n                    return;\n                switch (gameController.getGame().getPhase()) {\n                    case BATTLE:\n                        attacker = finalI;\n                        break;\n                    case MAIN1:\n                    case MAIN2:\n                        break;\n                }\n            });\n        }\n\n        for (int i = 0; i < 5; i++) {\n            int finalI = i;\n            oppMonsters.get(i).setOnMouseClicked(e -> {\n                if (oppMonsters.get(finalI).getImage() == null)\n                    return;\n                switch (gameController.getGame().getPhase()) {\n                    case BATTLE:\n                        if (attacker == -1)\n                            return;\n                        try {\n                            String result = gameController.attack(attacker, finalI);\n                            Alert.getInstance().successfulPrint(result);\n                            attacker = -1;\n                        } catch (Exception exception) {\n                            Alert.getInstance().errorPrint(exception.getMessage());\n                        }\n\n                        break;\n                    case MAIN1:\n                    case MAIN2:\n                        break;\n                }\n            });\n        }\n\n        opponentHand.setOnMouseClicked(e -> {\n            switch (gameController.getGame().getPhase()) {\n                case BATTLE:\n                    if (attacker == -1)\n                        return;\n                    try {\n                        String result = gameController.attackDirect(attacker);\n                        attacker = -1;\n                        Alert.getInstance().successfulPrint(result);\n                    } catch (Exception exception) {\n                        Alert.getInstance().errorPrint(exception.getMessage());\n                    }\n\n                    break;\n                case MAIN1:\n                case MAIN2:\n                    break;\n            }\n        });\n    }\n\n    private void initField() {\n        myMonsters.add(myMonster1);\n        myMonsters.add(myMonster2);\n        myMonsters.add(myMonster3);\n        myMonsters.add(myMonster4);\n        myMonsters.add(myMonster5);\n\n        mySpellTraps.add(mySpellTrap1);\n        mySpellTraps.add(mySpellTrap2);\n        mySpellTraps.add(mySpellTrap3);\n        mySpellTraps.add(mySpellTrap4);\n        mySpellTraps.add(mySpellTrap5);\n\n        oppMonsters.add(oppMonster1);\n        oppMonsters.add(oppMonster2);\n        oppMonsters.add(oppMonster3);\n        oppMonsters.add(oppMonster4);\n        oppMonsters.add(oppMonster5);\n\n        oppSpellTraps.add(opoSpellTrap1);\n        oppSpellTraps.add(opoSpellTrap2);\n        oppSpellTraps.add(opoSpellTrap3);\n        oppSpellTraps.add(opoSpellTrap4);\n        oppSpellTraps.add(opoSpellTrap5);\n    }\n\n    private void move(int currentX, int currentY, int destX, int destY, Node node) {\n        SequentialTransition sequentialTransition = new SequentialTransition();\n        sequentialTransition.setNode(node);\n        TranslateTransition translateTransition = new TranslateTransition();\n\n        translateTransition.setFromX(currentX);\n        translateTransition.setToX(destX);\n        translateTransition.setFromY(currentY);\n        translateTransition.setToY(destY);\n\n        sequentialTransition.getChildren().add(translateTransition);\n        sequentialTransition.play();\n    }\n\n    public void moveFromDeckToHand(Card card) {\n        ImageView imageView = new CardImageView(card);\n        imageView.setFitHeight(Size.CARD_HEIGHT_IN_SHOP.getValue());\n        imageView.setFitWidth(Size.CARD_WIDTH_IN_SHOP.getValue());\n        int number = myHand.getChildren().size();\n\n        myHand.add(imageView, number, 0);\n\n        imageView.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {\n            @Override\n            public void handle(MouseEvent event) {\n                if (event.getButton().equals(MouseButton.SECONDARY)) {\n                    if (card instanceof Monster) setMonster(card, imageView);\n                    else if (card instanceof SpellTrap) setSpellTrap(card, imageView);\n                } else {\n                    if (card instanceof Monster) summonMonster(card, imageView);\n                    else if (card instanceof SpellTrap) activateSpellTrap(card, imageView);\n                }\n            }\n        });\n    }\n\n    private void activateSpellTrap(Card card, ImageView imageView) {\n        try {\n            gameController.activateEffect(card, new CardAddress(Place.Hand, Owner.Me));\n            myHand.getChildren().remove(imageView);\n        } catch (Exception e) {\n            Alert.getInstance().errorPrint(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    private void setSpellTrap(Card card, ImageView imageView) {\n        try {\n            gameController.set(card);\n            mySpellTraps.get(gameController.getGame().getThisBoard().getSpellTrapZoneLastEmpty() - 1).setImage(Card.getUnknownImage());\n            myHand.getChildren().remove(imageView);\n        } catch (Exception e) {\n            Alert.getInstance().errorPrint(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    private void summonMonster(Card card, ImageView imageView) {\n        try {\n            gameController.summon(card);\n            myMonsters.get(gameController.getGame().getThisBoard().getMonsterZoneLastEmpty() - 1).setImage(card.getImage());\n            myHand.getChildren().remove(imageView);\n        } catch (Exception e) {\n            Alert.getInstance().errorPrint(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    private void setMonster(Card card, ImageView imageView) {\n        try {\n            gameController.set(card);\n            myMonsters.get(gameController.getGame().getThisBoard().getMonsterZoneLastEmpty() - 1).setImage(Card.getUnknownImage());\n            myHand.getChildren().remove(imageView);\n        } catch (Exception e) {\n            Alert.getInstance().errorPrint(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    public void showOpponentMonsterZone() {\n        HashMap<Integer, MonsterController> monsterZone = gameController.getGame().getBoard(1 - turn).getMonsterZoneMap();\n        for (int i = 0; i < 5; i++) {\n            if (!monsterZone.containsKey(i)) {\n                ImageView imageView = oppMonsters.get(i);\n                imageView.setImage(null);\n            } else if (monsterZone.get(i).getPosition() == MonsterPosition.ATTACK) {\n                ImageView imageView = oppMonsters.get(i);\n                imageView.setImage(monsterZone.get(i).getMonster().getImage());\n                imageView.setRotate(180);\n            } else if (monsterZone.get(i).getPosition() == MonsterPosition.DEFENCE_UP) {\n                ImageView imageView = oppMonsters.get(i);\n                imageView.setImage(monsterZone.get(i).getMonster().getImage());\n                imageView.setRotate(90);\n            } else {\n                ImageView imageView = oppMonsters.get(i);\n                imageView.setImage(Card.getUnknownImage());\n                imageView.setRotate(90);\n            }\n        }\n\n    }\n\n    public void showOpponentSpellTraps() {\n        HashMap<Integer, SpellTrapController> spellTrapZone = gameController.getGame().getBoard(1 - turn).getSpellTrapZoneMap();\n        for (int i = 0; i < 5; i++) {\n            if (!spellTrapZone.containsKey(i)) {\n                ImageView imageView = oppSpellTraps.get(i);\n                imageView.setImage(null);\n            } else if (spellTrapZone.get(i).getPosition() == SpellTrapPosition.UP) {\n                ImageView imageView = oppSpellTraps.get(i);\n                imageView.setImage(spellTrapZone.get(i).getCard().getImage());\n                imageView.setRotate(180);\n            } else {\n                ImageView imageView = oppSpellTraps.get(i);\n                imageView.setImage(Card.getUnknownImage());\n            }\n        }\n    }\n\n    public void showMyMonsterZone() {\n        HashMap<Integer, MonsterController> monsterZone = gameController.getGame().getBoard(turn).getMonsterZoneMap();\n        for (int i = 0; i < 5; i++) {\n            if (!monsterZone.containsKey(i)) {\n                ImageView imageView = myMonsters.get(i);\n                imageView.setImage(null);\n            } else if (monsterZone.get(i).getPosition() == MonsterPosition.ATTACK) {\n                ImageView imageView = myMonsters.get(i);\n                imageView.setImage(monsterZone.get(i).getMonster().getImage());\n            } else if (monsterZone.get(i).getPosition() == MonsterPosition.DEFENCE_UP) {\n                ImageView imageView = myMonsters.get(i);\n                imageView.setImage(monsterZone.get(i).getMonster().getImage());\n                imageView.setRotate(270);\n            } else {\n                ImageView imageView = myMonsters.get(i);\n                imageView.setImage(Card.getUnknownImage());\n                imageView.setRotate(270);\n            }\n        }\n\n    }\n\n    public void showMySpellTraps() {\n        HashMap<Integer, SpellTrapController> spellTrapZone = gameController.getGame().getBoard(turn).getSpellTrapZoneMap();\n        for (int i = 0; i < 5; i++) {\n            if (!spellTrapZone.containsKey(i)) {\n                ImageView imageView = mySpellTraps.get(i);\n                imageView.setImage(null);\n            } else if (spellTrapZone.get(i).getPosition() == SpellTrapPosition.UP) {\n                ImageView imageView = mySpellTraps.get(i);\n                imageView.setImage(spellTrapZone.get(i).getCard().getImage());\n            } else {\n                ImageView imageView = mySpellTraps.get(i);\n                imageView.setImage(Card.getUnknownImage());\n            }\n        }\n    }\n\n    public void escape() {\n        Stage stage = new Stage();\n        Label label = new Label(\"want to surrender?\");\n        Button yes = new Button(\"yes\");\n        yes.setOnAction(e -> {\n            gameController.surrender();\n            stage.close();\n        });\n        Button no = new Button(\"no\");\n        no.setOnAction(e -> {\n            stage.close();\n        });\n        HBox hBox = new HBox(yes, no);\n        hBox.setSpacing(5);\n        hBox.setAlignment(Pos.CENTER);\n        VBox root = new VBox(label, hBox);\n        root.setSpacing(5);\n        root.setAlignment(Pos.CENTER);\n        stage.setScene(new Scene(root));\n        stage.showAndWait();\n    }\n\n    public void updateLifePoint() {\n        myLP.setText(String.valueOf(gameController.getGame().getLifePoint(turn)));\n        opponentLP.setText(String.valueOf(gameController.getGame().getLifePoint(1 - turn)));\n    }\n\n    class CardImageView extends ImageView {\n        Card card;\n        boolean isVisible;\n\n        public CardImageView(Card card) {\n            this(card, true);\n        }\n\n        public CardImageView(Card card, boolean isVisible) {\n            this.card = card;\n            this.isVisible = isVisible;\n            if (isVisible)\n                setImage(card.getImage());\n            else\n                setImage(Card.getUnknownImage());\n\n            setOnMouseEntered(e -> {\n                if (isVisible) {\n                    cardInfo.setImage(card.getImage());\n                    cardDetails.setText(card.getDescription());\n                } else {\n                    cardInfo.setImage(Card.getUnknownImage());\n                    cardDetails.setText(\"\");\n                }\n            });\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/fxmlController/GameView.java b/src/main/java/fxmlController/GameView.java
--- a/src/main/java/fxmlController/GameView.java	(revision 7d500382c608e4f2ad9ebbc9a87f4f522bbe065f)
+++ b/src/main/java/fxmlController/GameView.java	(date 1625900967851)
@@ -451,7 +451,7 @@
 
     private void summonMonster(Card card, ImageView imageView) {
         try {
-            gameController.summon(card);
+            gameController.summon(turn,card);
             myMonsters.get(gameController.getGame().getThisBoard().getMonsterZoneLastEmpty() - 1).setImage(card.getImage());
             myHand.getChildren().remove(imageView);
         } catch (Exception e) {
Index: src/main/java/controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\n\nimport exceptions.*;\nimport fxmlController.App;\nimport fxmlController.GameView;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Parent;\nimport javafx.scene.Scene;\nimport javafx.scene.input.KeyCode;\nimport javafx.scene.input.KeyEvent;\nimport javafx.stage.Stage;\nimport model.*;\nimport model.cards.Card;\nimport model.cards.SpellTrap;\nimport model.cards.monster.Monster;\nimport model.cards.spell.Spell;\nimport model.cards.spell.SpellType;\nimport model.cards.trap.Trap;\nimport view.Print;\nimport view.Scan;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Stack;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class GameController {\n    private final int[] maxLifePoint = new int[]{0, 0};\n    private final int[] winningRounds = new int[]{0, 0};\n    private final User[] players = new User[2];\n    private final Deck[] decks = new Deck[2];\n    private final GameView[] views = new GameView[2];\n    private final Stage[] stages = new Stage[2];\n    private final Stack<SpellTrapController> chain = new Stack<>();\n    private final int roundNumber;\n    private Game game;\n    private CardAddress selectedCardAddress = null;\n    private Card selectedCard = null;\n    private MonsterController selectedMonster = null;\n    private SpellTrapController selectedSpellTrap = null;\n    private boolean temporaryTurnChange = false;\n    private int currentRound = 0;\n\n    public GameController(User firstPlayer, User secondPayer, int round) throws NoPlayerAvailable {\n        players[0] = firstPlayer;\n        players[1] = secondPayer;\n        decks[0] = (Deck) players[0].getActiveDeck().clone();\n        decks[1] = (Deck) players[1].getActiveDeck().clone();\n\n        views[0] = new GameView(this, 0);\n        views[1] = new GameView(this, 1);\n\n        stages[0] = new Stage();\n        stages[1] = new Stage();\n        this.game = new Game(this, players[0], players[1], decks[0], decks[1]);\n        this.roundNumber = round;\n    }\n\n    public GameController(User player, int round) throws NoPlayerAvailable {\n        players[0] = player;\n        players[1] = new Ai(this, 1);\n        decks[0] = (Deck) players[0].getActiveDeck().clone();\n        decks[1] = (Deck) players[1].getActiveDeck().clone();\n        this.game = new Game(this, players[0], players[1], decks[0], decks[1]);\n        ((Ai) players[1]).init();\n        this.roundNumber = round;\n        game.nextPhase();\n    }\n\n    public GameView[] getViews() {\n        return views;\n    }\n\n    public void run() {\n        FXMLLoader firstLoader = new FXMLLoader();\n        firstLoader.setControllerFactory(type -> {\n            try {\n                if (type == GameView.class) {\n                    return views[0];\n                }\n                return type.newInstance();\n            } catch (Exception exc) {\n                throw new RuntimeException(exc);\n            }\n        });\n        firstLoader.setLocation(GameController.class.getResource(\"/fxml/\" + \"game\" + \".fxml\"));\n\n        FXMLLoader secondLoader = new FXMLLoader();\n        secondLoader.setControllerFactory(type -> {\n            try {\n                if (type == GameView.class)\n                    return views[1];\n\n                return type.newInstance();\n            } catch (Exception exc) {\n                throw new RuntimeException(exc);\n            }\n        });\n        secondLoader.setLocation(GameController.class.getResource(\"/fxml/\" + \"game\" + \".fxml\"));\n\n        try {\n            Parent firstRoot = firstLoader.load();\n            Parent secondRoot = secondLoader.load();\n\n            Scene[] scenes = new Scene[2];\n            scenes[0] = new Scene(firstRoot);\n            scenes[1] = new Scene(secondRoot);\n            addEscape(scenes);\n            stages[0].setScene(scenes[0]);\n            stages[1].setScene(scenes[1]);\n            App.getStage().close();\n            stages[0].show();\n            stages[1].show();\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        getGame().getBoard(0).initBoard();\n        getGame().getBoard(1).initBoard();\n        game.nextPhase();\n    }\n\n    private void addEscape(Scene[] scenes) {\n        scenes[0].addEventHandler(KeyEvent.KEY_RELEASED, keyEvent -> {\n            if (keyEvent.getCode() == KeyCode.ESCAPE)\n                views[0].escape();\n        });\n        scenes[1].addEventHandler(KeyEvent.KEY_RELEASED, keyEvent -> {\n            if (keyEvent.getCode() == KeyCode.ESCAPE)\n                views[1].escape();\n        });\n    }\n\n    public boolean isTemporaryTurnChange() {\n        return temporaryTurnChange;\n    }\n\n    public void setTemporaryTurnChange(boolean temporaryTurnChange) {\n        this.temporaryTurnChange = temporaryTurnChange;\n    }\n\n    public Game getGame() {\n        return game;\n    }\n\n    public void setGame(Game game) {\n        this.game = game;\n    }\n\n    public String select(Matcher matcher) throws InvalidSelection, CardNotFoundException, InvalidInput, NoCardSelectedException {\n        HashMap<String, String> input = Scan.getInstance().parseInput(matcher.group());\n\n        String addressNumber;\n        if ((addressNumber = Scan.getInstance().getValue(input, \"monster\", \"m\")) != null) {\n            int monsterNumber = Integer.parseInt(addressNumber);\n            if (monsterNumber > Board.CARD_NUMBER_IN_ROW)\n                throw new InvalidSelection();\n\n            if (input.containsKey(\"opponent\") || input.containsKey(\"o\")) {\n                if (game.getOtherBoard().getMonsterByIndex(monsterNumber - 1) != null) {\n                    selectedMonster = game.getOtherBoard().getMonsterByIndex(monsterNumber - 1);\n                    selectedCard = game.getOtherBoard().getMonsterByIndex(monsterNumber - 1).getCard();\n                    selectedCardAddress = new CardAddress(Place.MonsterZone, Owner.Opponent, monsterNumber - 1);\n                }\n            } else {\n                if (game.getThisBoard().getMonsterByIndex(monsterNumber - 1) != null) {\n                    selectedMonster = game.getThisBoard().getMonsterByIndex(monsterNumber - 1);\n                    selectedCard = selectedMonster.getCard();\n                    selectedCardAddress = new CardAddress(Place.MonsterZone, Owner.Me, monsterNumber - 1);\n                }\n            }\n\n            if (selectedCard == null)\n                throw new CardNotFoundInPositionException();\n\n        } else if ((addressNumber = Scan.getInstance().getValue(input, \"spell\", \"s\")) != null) {\n            int spellNumber = Integer.parseInt(addressNumber);\n            if (spellNumber > Board.CARD_NUMBER_IN_ROW)\n                throw new InvalidSelection();\n\n            if (input.containsKey(\"opponent\") || input.containsKey(\"o\")) {\n                if (game.getOtherBoard().getSpellTrapByIndex(spellNumber - 1) != null) {\n                    selectedSpellTrap = game.getOtherBoard().getSpellTrapByIndex(spellNumber - 1);\n                    selectedCard = game.getOtherBoard().getSpellTrapByIndex(spellNumber - 1).getCard();\n                    selectedCardAddress = new CardAddress(Place.SpellTrapZone, Owner.Opponent, spellNumber - 1);\n                }\n            } else {\n                if (game.getThisBoard().getSpellTrapByIndex(spellNumber - 1) != null) {\n                    selectedSpellTrap = game.getThisBoard().getSpellTrapByIndex(spellNumber - 1);\n                    selectedCard = selectedSpellTrap.getCard();\n                    selectedCardAddress = new CardAddress(Place.SpellTrapZone, Owner.Me, spellNumber - 1);\n                }\n            }\n\n            if (selectedCard == null)\n                throw new CardNotFoundInPositionException();\n\n        } else if (Scan.getInstance().getValue(input, \"field\", \"f\") != null) {\n            if (input.containsKey(\"opponent\") || input.containsKey(\"o\")) {\n                if (game.getOtherBoard().getFieldZone() != null) {\n                    selectedSpellTrap = game.getOtherBoard().getFieldZone();\n                    selectedCard = selectedSpellTrap.getCard();\n                    selectedCardAddress = new CardAddress(Place.Field, Owner.Opponent);\n                }\n            } else {\n                if (game.getThisBoard().getFieldZone() != null) {\n                    selectedSpellTrap = game.getThisBoard().getFieldZone();\n                    selectedCard = selectedSpellTrap.getCard();\n                    selectedCardAddress = new CardAddress(Place.Field, Owner.Me);\n                }\n            }\n\n            if (selectedCard == null)\n                throw new CardNotFoundInPositionException();\n        } else if ((addressNumber = Scan.getInstance().getValue(input, \"hand\", \"h\")) != null) {\n            if (input.containsKey(\"force\") || input.containsKey(\"f\")) {\n                if (Database.getInstance().isDebuggingMode()) {\n                    String cardName = addressNumber;\n                    Card card = Card.getCard(cardName);\n                    if (card == null)\n                        throw new CardNotFoundException();\n                    game.getThisBoard().addCardToHand(card);\n                    int cardIndex = game.getThisBoard().getHand().size() - 1;\n                    selectedCard = card;\n                    selectedCardAddress = new CardAddress(Place.Hand, Owner.Me, cardIndex);\n                    return \"card selected\";\n                } else {\n                    throw new InvalidInput();\n                }\n            }\n            int handNumber = Integer.parseInt(addressNumber);\n            if (handNumber > game.getThisBoard().getHand().size())\n                throw new InvalidSelection();\n\n            selectedCard = game.getThisBoard().getHand().get(handNumber - 1);\n            selectedCardAddress = new CardAddress(Place.Hand, Owner.Me, handNumber - 1);\n        } else if (input.containsKey(\"-d\")) {\n            if (selectedCard == null) {\n                throw new NoCardSelectedException();\n            }\n            deselect();\n            return \"card deselected\";\n        } else\n            throw new InvalidInput();\n        return \"card selected\";\n    }\n\n    public void deselect() {\n        selectedCardAddress = null;\n        selectedCard = null;\n        selectedMonster = null;\n        selectedSpellTrap = null;\n    }\n\n    public void nextPhase(Phase phase) {\n        int myTurn = game.getTurn();\n        while (myTurn == game.getTurn() && game.getPhase().compareTo(phase) < 0)\n            game.nextPhase();\n    }\n\n    public String summon(Card card) throws NoCardSelectedException, CannotSummonException, ActionNotAllowed,\n            MonsterNotFoundException, FullMonsterZone, AlreadySummonException, NotEnoughCardForTribute,\n            InvalidSelection {\n        selectedCard = card;\n\n        if (temporaryTurnChange)\n            throw new NotYourTurnException();\n        if (selectedCard == null)\n            throw new NoCardSelectedException();\n\n        if (game.getPhase() != Phase.MAIN1 && game.getPhase() != Phase.MAIN2)\n            throw new ActionNotAllowed();\n\n        if (game.getThisBoard().getMonsterZoneNumber() >= Board.CARD_NUMBER_IN_ROW)\n            throw new FullMonsterZone();\n\n        if (game.isSummonOrSetThisTurn())\n            throw new AlreadySummonException();\n\n        Monster selectedMonster = (Monster) selectedCard;\n\n        if (selectedMonster.getLevel() > 4 && selectedMonster.getLevel() <= 6) {\n            if (game.getThisBoard().getMonsterZoneNumber() < 1)\n                throw new NotEnoughCardForTribute();\n            Print.getInstance().printMessage(\"Enter the address of the monster you want to tribute:\");\n\n            Integer monsterAddress = Scan.getInstance().getInteger();\n            if (monsterAddress == null)\n                return null;\n            if (monsterAddress >= Board.CARD_NUMBER_IN_ROW ||\n                    game.getThisBoard().getMonsterByIndex(monsterAddress - 1) == null)\n                throw new CardNotFoundInPositionException(\"There no monsters one this address\");\n\n            game.getThisBoard().removeMonster(monsterAddress - 1);\n        } else if (selectedMonster.getLevel() > 6) {\n            if (game.getThisBoard().getMonsterZoneNumber() < 2)\n                throw new NotEnoughCardForTribute();\n\n            Print.getInstance().printMessage(\"Enter the address of the first monster you want to tribute:\");\n            Integer monsterAddress1 = Scan.getInstance().getInteger();\n\n            Print.getInstance().printMessage(\"Enter the address of the second monster you want to tribute:\");\n            Integer monsterAddress2 = Scan.getInstance().getInteger();\n\n            if (monsterAddress1 == null || monsterAddress2 == null)\n                return null;\n            if (monsterAddress1 >= Board.CARD_NUMBER_IN_ROW ||\n                    monsterAddress2 >= Board.CARD_NUMBER_IN_ROW ||\n                    game.getThisBoard().getMonsterByIndex(monsterAddress1 - 1) == null ||\n                    game.getThisBoard().getMonsterByIndex(monsterAddress2 - 1) == null)\n                throw new CardNotFoundInPositionException(\"there no monsters one this address\");\n\n            game.getThisBoard().removeMonster(monsterAddress1 - 1);\n            game.getThisBoard().removeMonster(monsterAddress2 - 1);\n        }\n        MonsterController monster = game.getThisBoard().putMonster(selectedMonster, MonsterPosition.ATTACK);\n        game.setSummonOrSetThisTurn(true);\n        monster.summon();\n        for (MonsterController monsterEffect : game.getThisBoard().getMonstersZone())\n            monsterEffect.runMonsterEffectAtSummon();\n\n        if (game.getThisBoard().getFieldZone() != null)\n            game.getThisBoard().getFieldZone().runFieldEffectAtSummon();\n\n        if (game.getOtherBoard().getFieldZone() != null)\n            game.getOtherBoard().getFieldZone().runFieldEffectAtSummon();\n\n        deselect();\n        if (activeOpponentTrapOnSummon(monster, \"normal\")) {\n            return null;\n        }\n\n        views[1 - game.getTurn()].showOpponentMonsterZone();\n        return \"summoned successfully\";\n    }\n\n    public String set(Card card) throws NoCardSelectedException, CannotSetException {\n        selectedCard = card;\n\n        if (temporaryTurnChange)\n            throw new NotYourTurnException();\n        if (selectedCard == null)\n            throw new NoCardSelectedException();\n\n\n        if (game.getPhase() != Phase.MAIN1 && game.getPhase() != Phase.MAIN2)\n            throw new ActionNotAllowed();\n\n        if (selectedCard instanceof Monster) {\n            setMonster();\n        } else if (selectedCard instanceof Spell) {\n            setSpell();\n        } else if (selectedCard instanceof Trap) {\n            setTrap();\n        }\n        deselect();\n        return \"set successfully\";\n    }\n\n    private void setTrap() {\n        if (game.getThisBoard().getSpellTrapZoneNumber() >= Board.CARD_NUMBER_IN_ROW)\n            throw new FullSpellTrapZone();\n\n        Trap trap = (Trap) selectedCard;\n        game.getThisBoard().putSpellTrap(trap, SpellTrapPosition.DOWN);\n        views[1 - game.getTurn()].showOpponentSpellTraps();\n    }\n\n    private void setSpell() {\n        if (game.getThisBoard().getSpellTrapZoneNumber() >= Board.CARD_NUMBER_IN_ROW)\n            throw new FullSpellTrapZone();\n\n        Spell spell = (Spell) selectedCard;\n        game.getThisBoard().putSpellTrap(spell, SpellTrapPosition.DOWN);\n        views[1 - game.getTurn()].showOpponentSpellTraps();\n    }\n\n    private void setMonster() {\n        if (game.getThisBoard().getMonsterZoneNumber() >= Board.CARD_NUMBER_IN_ROW)\n            throw new FullMonsterZone();\n\n        if (game.isSummonOrSetThisTurn())\n            throw new AlreadySummonException();\n\n        Monster selectedMonster = (Monster) selectedCard;\n\n        if (selectedMonster.getLevel() > 4 && selectedMonster.getLevel() <= 6) {\n            if (game.getThisBoard().getMonsterZoneNumber() < 1)\n                throw new NotEnoughCardForTribute();\n\n            Print.getInstance().printMessage(\"Enter the address of the monster you want to tribute:\");\n            Integer monsterAddress = Scan.getInstance().getInteger();\n            if (monsterAddress == null)\n                return;\n            if (monsterAddress >= Board.CARD_NUMBER_IN_ROW ||\n                    game.getThisBoard().getMonsterByIndex(monsterAddress - 1) == null)\n                throw new CardNotFoundInPositionException(\"there no monsters one this address\");\n\n            game.getThisBoard().removeMonster(monsterAddress - 1);\n        } else if (selectedMonster.getLevel() > 6) {\n            if (game.getThisBoard().getMonsterZoneNumber() < 2)\n                throw new NotEnoughCardForTribute();\n\n            Print.getInstance().printMessage(\"Enter the address of the first monster you want to tribute:\");\n            Integer monsterAddress1 = Scan.getInstance().getInteger();\n\n            Print.getInstance().printMessage(\"Enter the address of the second monster you want to tribute:\");\n            Integer monsterAddress2 = Scan.getInstance().getInteger();\n\n            if (monsterAddress1 == null || monsterAddress2 == null)\n                return;\n            if (monsterAddress1 >= Board.CARD_NUMBER_IN_ROW ||\n                    monsterAddress2 >= Board.CARD_NUMBER_IN_ROW ||\n                    game.getThisBoard().getMonsterByIndex(monsterAddress1 - 1) == null ||\n                    game.getThisBoard().getMonsterByIndex(monsterAddress2 - 1) == null)\n                throw new CardNotFoundInPositionException(\"there no monsters one this address\");\n\n            game.getThisBoard().removeMonster(monsterAddress1 - 1);\n            game.getThisBoard().removeMonster(monsterAddress2 - 1);\n        }\n        MonsterController monster = game.getThisBoard().putMonster(selectedMonster, MonsterPosition.DEFENCE_DOWN);\n        game.setSummonOrSetThisTurn(true);\n        monster.set();\n        views[1 - game.getTurn()].showOpponentMonsterZone();\n    }\n\n    public String setPosition(Matcher matcher) {\n        if (temporaryTurnChange)\n            throw new NotYourTurnException();\n        if (selectedCard == null)\n            throw new NoCardSelectedException();\n\n        if (selectedCardAddress.getOwner() != Owner.Me ||\n                selectedCardAddress.getPlace() != Place.MonsterZone ||\n                !(selectedCard instanceof Monster))\n            throw new CannotChangeException();\n\n        if (game.getPhase() != Phase.MAIN1 && game.getPhase() != Phase.MAIN2)\n            throw new ActionNotAllowed();\n\n        MonsterPosition wantedPosition;\n        String position = matcher.group(1);\n        if (position.equals(\"attack\"))\n            wantedPosition = MonsterPosition.ATTACK;\n        else if (position.equals(\"defence\"))\n            wantedPosition = MonsterPosition.DEFENCE_UP;\n        else\n            throw new InvalidInput();\n\n        if (wantedPosition == MonsterPosition.ATTACK && selectedMonster.getPosition() != MonsterPosition.DEFENCE_UP)\n            throw new CannotChangeException();\n        if (wantedPosition == MonsterPosition.DEFENCE_UP && selectedMonster.getPosition() != MonsterPosition.ATTACK)\n            throw new CannotChangeException();\n\n        if (selectedMonster.isHasPositionChanged())\n            throw new AlreadyChangeException();\n\n        selectedMonster.setPosition(wantedPosition);\n        deselect();\n        return \"monster card position changed successfully\";\n    }\n\n    public String flipSummon(Matcher matcher) {\n        if (temporaryTurnChange)\n            throw new NotYourTurnException();\n        if (selectedCard == null)\n            throw new NoCardSelectedException();\n\n        if (selectedCardAddress.getOwner() != Owner.Me ||\n                selectedCardAddress.getPlace() != Place.MonsterZone ||\n                !(selectedCard instanceof Monster))\n            throw new CannotChangeException();\n\n        if (game.getPhase() != Phase.MAIN1 && game.getPhase() != Phase.MAIN2)\n            throw new ActionNotAllowed();\n\n        if (selectedMonster.getPosition() != MonsterPosition.DEFENCE_DOWN || selectedMonster.isMonsterNew())\n            throw new CannotFlipSummon();\n\n        activeOpponentTrapOnSummon(selectedMonster, \"flip\");\n        selectedMonster.flip();\n        deselect();\n        return \"flip summoned successfully\";\n    }\n\n    public String attackDirect(int attacker) {\n        selectedCard = game.getThisBoard().getMonsterByIndex(attacker).getCard();\n        selectedMonster = game.getThisBoard().getMonsterByIndex(attacker);\n        if (temporaryTurnChange)\n            throw new NotYourTurnException();\n        if (selectedCard == null)\n            throw new NoCardSelectedException();\n\n        if (game.getPhase() != Phase.BATTLE)\n            throw new ActionNotAllowed();\n\n        if (selectedMonster.isHasAttackedThisTurn())\n            throw new AlreadyAttackedException();\n\n        if (!game.getOtherBoard().canDirectAttack())\n            throw new CannotAttackDirectlyException();\n\n        AttackResult result = activeOpponentTrapOnAttack(selectedMonster, null);\n\n        if (result == null) {\n            result = new AttackResult(0, selectedMonster.getCard().getAttackPower(), false, false);\n        }\n\n        if (result.isRemoveMyCard())\n            selectedMonster.remove(null);\n\n        game.decreaseThisLifePoint(result.getMyLPDecrease());\n        game.decreaseOtherLifePoint(result.getOpLPDecrease());\n        updateViewsGameBoard();\n        deselect();\n        return result.getMessage();\n    }\n\n    private void updateViewsGameBoard() {\n        for (int i = 0; i < 2; i++) {\n            views[i].showMyMonsterZone();\n            views[i].showMySpellTraps();\n            views[i].showOpponentMonsterZone();\n            views[i].showOpponentSpellTraps();\n        }\n    }\n\n    public String attack(int attacker, int number) {\n        selectedCard = game.getThisBoard().getMonsterByIndex(attacker).getCard();\n        selectedMonster = game.getThisBoard().getMonsterByIndex(attacker);\n        if (temporaryTurnChange)\n            throw new NotYourTurnException();\n        if (selectedCard == null)\n            throw new NoCardSelectedException();\n\n        if (selectedMonster.getPosition() != MonsterPosition.ATTACK)\n            throw new CannotAttackException();\n\n        if (game.getPhase() != Phase.BATTLE)\n            throw new ActionNotAllowed();\n\n        if (selectedMonster.isHasAttackedThisTurn())\n            throw new AlreadyAttackedException();\n\n        MonsterController toBeAttacked = game.getOtherBoard().getMonsterByIndex(number);\n        if (toBeAttacked == null || !toBeAttacked.canBeAttacked(selectedMonster))\n            throw new NoCardToAttackException();\n\n        AttackResult attackResult = toBeAttacked.attack(selectedMonster);\n        AttackResult trapEffect = activeOpponentTrapOnAttack(selectedMonster, toBeAttacked);\n        if (trapEffect != null)\n            attackResult = trapEffect;\n        if (attackResult == null)\n            attackResult = new AttackResult(selectedMonster, toBeAttacked);\n\n        if (attackResult.isRemoveOpCard())\n            toBeAttacked.remove(selectedMonster);\n        if (attackResult.isRemoveMyCard())\n            selectedMonster.remove(toBeAttacked);\n\n        game.decreaseThisLifePoint(attackResult.getMyLPDecrease());\n        game.decreaseOtherLifePoint(attackResult.getOpLPDecrease());\n        updateViewsGameBoard();\n        deselect();\n\n        return attackResult.getMessage();\n    }\n\n\n    public String activateEffect(Card card, CardAddress address) {\n        selectedCard = card;\n        selectedCardAddress = address;\n        if (temporaryTurnChange) {\n            activateEffectOnOpponentTurn();\n            return null;\n        }\n        if (selectedCard == null)\n            throw new NoCardSelectedException();\n\n        if (game.getPhase() != Phase.MAIN1 && game.getPhase() != Phase.MAIN2)\n            throw new ActionNotAllowed();\n\n        if (selectedCardAddress.getPlace() == Place.SpellTrapZone &&\n                selectedSpellTrap.getPosition() == SpellTrapPosition.UP)\n            throw new AlreadyActivatedException();\n\n        Spell spell = (Spell) selectedCard;\n\n        if (spell.getType() == SpellType.FIELD) {\n            SpellController spellController = game.getThisBoard().putFiled(spell);\n            spellController.runFieldEffectAtSummon();\n        } else {\n            SpellTrapController controller;\n            if (selectedCardAddress.getPlace() == Place.Hand) {\n                if (game.getThisBoard().getSpellTrapZoneNumber() >= Board.CARD_NUMBER_IN_ROW)\n                    throw new FullSpellTrapZone();\n                controller = game.getThisBoard().putSpellTrap(spell, SpellTrapPosition.UP);\n            } else {\n                controller = selectedSpellTrap;\n                if (controller.isSpellTrapNew())\n                    throw new CannotActivateException();\n            }\n\n            chain.push(controller);\n            if (conditionsForChangingTurn()) {\n                changeTurn();\n            } else {\n                while (!chain.isEmpty()) {\n                    SpellTrapController current = chain.pop();\n                    current.activate();\n                }\n            }\n        }\n        deselect();\n\n        return \"spell activated\";\n    }\n\n    private void activateEffectOnOpponentTurn() {\n        if (selectedCard == null)\n            throw new NoCardSelectedException();\n\n        if (selectedCardAddress.getOwner() != Owner.Me ||\n                !(selectedCard instanceof SpellTrap))\n            throw new CannotActivateException();\n\n        SpellTrap spellTrap = (SpellTrap) selectedCard;\n        if (selectedCardAddress.getPlace() == Place.SpellTrapZone) {\n            chain.push(selectedSpellTrap);\n            while (!chain.isEmpty()) {\n                SpellTrapController current = chain.pop();\n                current.activate();\n            }\n        } else if (selectedCardAddress.getPlace() == Place.Hand) {\n            if (spellTrap instanceof Spell && ((Spell) spellTrap).getType() != SpellType.QUICK_PLAY) {\n                throw new ActionNotAllowed();\n            }\n            SpellTrapController controller = game.getThisBoard().putSpellTrap(spellTrap, SpellTrapPosition.UP);\n            chain.push(controller);\n            while (!chain.isEmpty()) {\n                SpellTrapController current = chain.pop();\n                current.activate();\n            }\n            controller.remove();\n        }\n        deselect();\n    }\n\n    public String showGraveyard(Matcher matcher) {\n        List<Card> graveyard = game.getThisBoard().getGraveyard();\n        if (graveyard.isEmpty()) {\n            Print.getInstance().printMessage(\"graveyard empty\");\n        } else {\n            int i = 1;\n            for (Card card : graveyard) {\n                Print.getInstance().printMessage(i + \". \" + card.getName() + \":\" + card.getDescription());\n                i++;\n            }\n        }\n        while (true) {\n            if (Scan.getInstance().getString().equals(\"back\"))\n                break;\n        }\n        return null;\n    }\n\n    public String showCard(Matcher matcher) {\n        String[] rawInput = matcher.group().split(\"\\\\s+\");\n        Map<String, String> input = Scan.getInstance().parseInput(matcher.group());\n        if (input.containsKey(\"selected\") || input.containsKey(\"s\")) {\n            if (selectedCard == null)\n                throw new NoCardSelectedException();\n            if (selectedCardAddress.getOwner() == Owner.Opponent) {\n                if ((selectedCard instanceof Monster) && selectedMonster.getPosition() == MonsterPosition.DEFENCE_DOWN)\n                    throw new CardNotVisibleException();\n                if ((selectedCard instanceof SpellTrap) && selectedSpellTrap.getPosition() == SpellTrapPosition.DOWN)\n                    throw new CardNotVisibleException();\n            }\n            Print.getInstance().printCard(selectedCard);\n        } else {\n            String cardName = rawInput[2];\n            Card card = Card.getCard(cardName);\n            if (card == null)\n                throw new CardNotFoundInPositionException();\n            Print.getInstance().printCard(card);\n        }\n        return null;\n    }\n\n    public void surrender() {\n        game.setSurrenderPlayer(game.getTurn());\n        endGame();\n    }\n\n    public boolean isFinished() {\n        return false;\n    }\n\n    public void endGame() {\n        int winner = game.getWinner();\n        int[] scores = new int[2];\n        scores[winner] = 1000;\n        scores[1 - winner] = 0;\n        Print.getInstance().printMessage(game.getUser(winner).getUsername() + \" won the game\" +\n                \" and the score is: \" + scores[0] + \"-\" + scores[1]);\n        winningRounds[winner]++;\n        maxLifePoint[winner] = Math.max(maxLifePoint[winner], game.getLifePoint(winner));\n        if (winningRounds[0] > roundNumber / 2 || winningRounds[1] > roundNumber / 2) {\n            endMatch();\n        } else {\n            currentRound++;\n            changeDeck(0);\n            changeDeck(1);\n            try {\n                game = new Game(this, players[0], players[1], decks[0], decks[1]);\n            } catch (NoPlayerAvailable ignored) {\n\n            }\n        }\n    }\n\n    private void changeDeck(int turn) {\n        if (players[turn] instanceof Ai)\n            return;\n        Print print = Print.getInstance();\n        print.printMessage(decks[turn].showDeck(\"main\"));\n        print.printMessage(decks[turn].showDeck(\"side\"));\n\n        print.printMessage(\"\\\"<card name> side\\\" : put <card name> from main to side\");\n        print.printMessage(\"\\\"<card name> main\\\" : put <card name> from side to main\");\n        print.printMessage(\"\\\"show\\\" : show deck\");\n        print.printMessage(\"\\\"end\\\" : finish arranging deck\");\n\n        int mainDeckChange = 0;\n        String command;\n        Pattern sidePattern = Pattern.compile(\"[\\\\w ]* side\");\n        Pattern mainPattern = Pattern.compile(\"[\\\\w ]* main\");\n        while (true) {\n            command = Scan.getInstance().getString();\n            Matcher matcher;\n            if ((matcher = sidePattern.matcher(command)).find()) {\n                String name = matcher.group(1);\n                if (!decks[turn].getMainDeck().contains(name)) {\n                    print.printMessage(\"no such card\");\n                    continue;\n                }\n                decks[turn].getMainDeck().remove(name);\n                decks[turn].getSideDeck().add(name);\n                mainDeckChange--;\n            } else if ((matcher = mainPattern.matcher(command)).find()) {\n                String name = matcher.group(1);\n                if (!decks[turn].getSideDeck().contains(name)) {\n                    print.printMessage(\"no such card\");\n                    continue;\n                }\n                decks[turn].getSideDeck().remove(name);\n                decks[turn].getMainDeck().add(name);\n                mainDeckChange++;\n            } else if (command.equals(\"show\")) {\n                print.printMessage(decks[turn].showDeck(\"main\"));\n                print.printMessage(decks[turn].showDeck(\"side\"));\n            } else if (command.equals(\"end\")) {\n                if (mainDeckChange != 0) {\n                    print.printMessage(\"main deck card number shouldn't change\");\n                } else\n                    break;\n            }\n        }\n    }\n\n    public void endMatch() {\n        int winner;\n        if (winningRounds[0] > roundNumber / 2)\n            winner = 0;\n        else\n            winner = 1;\n        int looser = 1 - winner;\n        int winnerScore = 1000 * roundNumber;\n        int looserScore = 0;\n\n        int winnerPrize = roundNumber * (1000 + maxLifePoint[winner]);\n        int looserPrize = roundNumber * 100;\n\n        players[winner].increaseScore(winnerScore);\n        players[looser].increaseScore(looserScore);\n        players[winner].increaseMoney(winnerPrize);\n        players[looser].increaseMoney(looserPrize);\n\n        int[] scores = new int[2];\n        scores[winner] = winnerScore;\n        scores[looser] = looserScore;\n        Print.getInstance().printMessage(players[winner].getUsername() + \" won the whole match\" +\n                \" with score: \" + scores[0] + \"-\" + scores[1]);\n\n        closeGame();\n    }\n\n    private void closeGame() {\n        stages[0].close();\n        stages[1].close();\n        App.getStage().show();\n    }\n\n    public void showBoard() {\n\n    }\n\n    public boolean conditionsForChangingTurn() {\n        return false;\n    }\n\n    public void finishTemporaryChangeTurn() {\n        if (temporaryTurnChange)\n            game.temporaryChangeTurn();\n    }\n\n    public AttackResult activeOpponentTrapOnAttack(MonsterController attacker, MonsterController defender) {\n        AttackResult result = null;\n        boolean found = false;\n        for (SpellTrapController controller : game.getOtherBoard().getSpellTrapZone()) {\n            if (controller instanceof TrapController) {\n                TrapController trap = (TrapController) controller;\n                if (trap.canActiveOnAttacked(attacker, defender)) {\n                    if (!found) {\n                        found = true;\n                        game.temporaryChangeTurn();\n                    }\n                    Print.getInstance().printMessage(\"do you want to activate \" + trap.getCard().getName());\n                    String answer = Scan.getInstance().getString();\n                    if (answer.equals(\"yes\")) {\n                        result = trap.onAttacked(attacker, defender);\n                        trap.remove();\n                    }\n                }\n            }\n        }\n        if (found) {\n            game.temporaryChangeTurn();\n        }\n        return result;\n    }\n\n    public boolean activeOpponentTrapOnSummon(MonsterController summoned, String type) {\n        boolean result = false;\n        boolean found = false;\n        for (SpellTrapController controller : game.getOtherBoard().getSpellTrapZone()) {\n            if (controller instanceof TrapController) {\n                TrapController trap = (TrapController) controller;\n                if (trap.canActiveOnSummon(summoned, type)) {\n                    if (!found) {\n                        found = true;\n                        game.temporaryChangeTurn();\n                    }\n                    Print.getInstance().printMessage(\"do you want to activate \" + trap.getCard().getName());\n                    String answer = Scan.getInstance().getString();\n                    if (answer.equals(\"yes\")) {\n                        result |= trap.onSummon(summoned, type);\n                        trap.remove();\n                    }\n                }\n            }\n        }\n        if (found) {\n            game.temporaryChangeTurn();\n        }\n        return result;\n    }\n\n    public void changeTurn() {\n        if (!temporaryTurnChange && conditionsForChangingTurn()) {\n            game.temporaryChangeTurn();\n            Print.getInstance().printMessage(\"do you want to activate your trap and spell?\");\n            String answer = Scan.getInstance().getString();\n            if (!answer.equals(\"yes\")) {\n                game.temporaryChangeTurn();\n            }\n        }\n    }\n\n    public String increaseLP(Matcher matcher) {\n        if (!Database.getInstance().isDebuggingMode())\n            throw new InvalidInput();\n        HashMap<String, String> input = Scan.getInstance().parseInput(matcher.group());\n        String lpString = Scan.getInstance().getValue(input, \"LP\", \"LP\");\n        if (lpString == null)\n            throw new InvalidInput();\n        int lp = Integer.parseInt(lpString);\n        game.decreaseThisLifePoint(-lp);\n        return \"LifePoint added\";\n    }\n\n    public String setWinner(Matcher matcher) {\n        if (!Database.getInstance().isDebuggingMode())\n            throw new InvalidInput();\n        String nickname = matcher.group(1);\n        if (game.getThisUser().getNickname().equals(nickname)) {\n            game.setFinished(true);\n            game.setWinner(game.getTurn());\n            endGame();\n            return null;\n        } else if (game.getOtherUser().getNickname().equals(nickname)) {\n            game.setFinished(true);\n            game.setWinner(1 - game.getTurn());\n            endGame();\n            return null;\n        } else\n            throw new InvalidInput();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controller/GameController.java b/src/main/java/controller/GameController.java
--- a/src/main/java/controller/GameController.java	(revision 7d500382c608e4f2ad9ebbc9a87f4f522bbe065f)
+++ b/src/main/java/controller/GameController.java	(date 1625900934345)
@@ -261,7 +261,7 @@
             game.nextPhase();
     }
 
-    public String summon(Card card) throws NoCardSelectedException, CannotSummonException, ActionNotAllowed,
+    public String summon(int turn,Card card) throws NoCardSelectedException, CannotSummonException, ActionNotAllowed,
             MonsterNotFoundException, FullMonsterZone, AlreadySummonException, NotEnoughCardForTribute,
             InvalidSelection {
         selectedCard = card;
