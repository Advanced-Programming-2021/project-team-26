Index: src/main/java/fxmlController/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fxmlController;\n\nimport Utilities.Alert;\nimport controller.*;\nimport javafx.animation.SequentialTransition;\nimport javafx.animation.TranslateTransition;\nimport javafx.event.ActionEvent;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.FXMLLoader;\nimport javafx.fxml.Initializable;\nimport javafx.geometry.Pos;\nimport javafx.scene.Node;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.ProgressBar;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.MouseButton;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.GridPane;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.text.Text;\nimport javafx.stage.Stage;\nimport model.CardAddress;\nimport model.Owner;\nimport model.Place;\nimport model.cards.Card;\nimport model.cards.SpellTrap;\nimport model.cards.monster.Monster;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\npublic class GameView implements Initializable {\n\n    public static final String MY_PHASE_STYLE = \"-fx-background-color: #3ba8e2;\";\n    public static final String OPPONENT_PHASE_STYLE = \"-fx-background-color: #e01313;\";\n    public static final String MY_CURRENT_PHASE_STYLE = \"-fx-background-color: #3ba8e2;-fx-border-color: #001a82; -fx-border-width: 5\";\n    public static final String OPPONENT_CURRENT_PHASE_STYLE = \"-fx-background-color: #e01313;-fx-border-color: #570000; -fx-border-width: 5\";\n    private final ArrayList<CardImageView> myMonsters = new ArrayList<>();\n    private final ArrayList<CardImageView> mySpellTraps = new ArrayList<>();\n    private final ArrayList<CardImageView> oppMonsters = new ArrayList<>();\n    private final ArrayList<CardImageView> oppSpellTraps = new ArrayList<>();\n    private final GameController gameController;\n    private final int turn;\n    public Button drawPhaseBut;\n    public Button standbyPhaseBut;\n    public Button mainPhase1But;\n    public Button battlePhaseBut;\n    public Button mainPhase2But;\n    public Button endPhaseBut;\n    public ImageView cardInfo;\n    public TextArea cardDetails;\n    public ImageView myGraveyard;\n    public ImageView oppGraveyard;\n\n    @FXML\n    private AnchorPane root;\n\n    @FXML\n    private CardImageView opoSpellTrap4;\n\n    @FXML\n    private CardImageView opoSpellTrap2;\n\n    @FXML\n    private CardImageView opoSpellTrap1;\n\n    @FXML\n    private CardImageView opoSpellTrap3;\n\n    @FXML\n    private CardImageView opoSpellTrap5;\n\n    @FXML\n    private CardImageView oppMonster5;\n\n    @FXML\n    private CardImageView oppMonster3;\n\n    @FXML\n    private CardImageView oppMonster1;\n\n    @FXML\n    private CardImageView oppMonster2;\n\n    @FXML\n    private CardImageView oppMonster4;\n\n    @FXML\n    private CardImageView myMonster5;\n\n    @FXML\n    private CardImageView myMonster3;\n\n    @FXML\n    private CardImageView myMonster1;\n\n    @FXML\n    private CardImageView myMonster2;\n\n    @FXML\n    private CardImageView myMonster4;\n\n    @FXML\n    private ImageView mySpellTrap5;\n\n    @FXML\n    private CardImageView mySpellTrap3;\n\n    @FXML\n    private CardImageView mySpellTrap1;\n\n    @FXML\n    private CardImageView mySpellTrap2;\n\n    @FXML\n    private CardImageView mySpellTrap4;\n\n    @FXML\n    private ProgressBar opponentLPProgress;\n\n    @FXML\n    private ProgressBar myLPProgress;\n\n    @FXML\n    private ImageView opponentProfile;\n\n    @FXML\n    private ImageView myProfile;\n\n    @FXML\n    private Text myUsername;\n\n    @FXML\n    private Text myNickname;\n\n    @FXML\n    private Text opponentNickname;\n\n    @FXML\n    private Text opponentUsername;\n\n    @FXML\n    private Text opponentLP;\n\n    @FXML\n    private Text myLP;\n\n    @FXML\n    private GridPane opponentHand;\n\n    @FXML\n    private GridPane myHand;\n\n    @FXML\n    private ImageView myDeckImage;\n\n    private int attacker = -1;\n\n    public GameView(GameController controller, int turn) {\n        this.gameController = controller;\n        this.turn = turn;\n    }\n\n    public void updatePhase() {\n        if (gameController.getGame().getTurn() != turn) {\n            updatePhaseOpponent();\n            return;\n        }\n\n        standbyPhaseBut.setStyle(MY_PHASE_STYLE);\n        drawPhaseBut.setStyle(MY_PHASE_STYLE);\n        mainPhase1But.setStyle(MY_PHASE_STYLE);\n        battlePhaseBut.setStyle(MY_PHASE_STYLE);\n        mainPhase2But.setStyle(MY_PHASE_STYLE);\n        endPhaseBut.setStyle(MY_PHASE_STYLE);\n\n        Phase phase = gameController.getGame().getPhase();\n        boolean found = false;\n        if (Phase.STANDBY.compareTo(phase) == 0) {\n            found = true;\n            standbyPhaseBut.setOnAction(null);\n            standbyPhaseBut.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            standbyPhaseBut.setOnAction(null);\n        if (Phase.DRAW.compareTo(phase) == 0) {\n            found = true;\n            drawPhaseBut.setOnAction(null);\n            drawPhaseBut.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else {\n            drawPhaseBut.setOnAction(found ? this::drawPhase : null);\n        }\n        if (Phase.MAIN1.compareTo(phase) == 0) {\n            found = true;\n            mainPhase1But.setOnAction(null);\n            mainPhase1But.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            mainPhase1But.setOnAction(found ? this::mainPhase1 : null);\n        if (Phase.BATTLE.compareTo(phase) == 0) {\n            found = true;\n            battlePhaseBut.setOnAction(null);\n            battlePhaseBut.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            battlePhaseBut.setOnAction(found ? this::battlePhase : null);\n        if (Phase.MAIN2.compareTo(phase) == 0) {\n            found = true;\n            mainPhase2But.setOnAction(null);\n            mainPhase2But.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            mainPhase2But.setOnAction(found ? this::mainPhase2 : null);\n        if (Phase.END.compareTo(phase) == 0) {\n            endPhaseBut.setOnAction(null);\n            endPhaseBut.setStyle(MY_CURRENT_PHASE_STYLE);\n        } else\n            endPhaseBut.setOnAction(found ? this::endPhase : null);\n    }\n\n\n    private void updatePhaseOpponent() {\n        standbyPhaseBut.setStyle(OPPONENT_PHASE_STYLE);\n        drawPhaseBut.setStyle(OPPONENT_PHASE_STYLE);\n        mainPhase1But.setStyle(OPPONENT_PHASE_STYLE);\n        battlePhaseBut.setStyle(OPPONENT_PHASE_STYLE);\n        mainPhase2But.setStyle(OPPONENT_PHASE_STYLE);\n        endPhaseBut.setStyle(OPPONENT_PHASE_STYLE);\n\n        standbyPhaseBut.setOnAction(null);\n        drawPhaseBut.setOnAction(null);\n        mainPhase1But.setOnAction(null);\n        battlePhaseBut.setOnAction(null);\n        mainPhase2But.setOnAction(null);\n        endPhaseBut.setOnAction(null);\n\n        switch (gameController.getGame().getPhase()) {\n            case DRAW:\n                drawPhaseBut.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case STANDBY:\n                standbyPhaseBut.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case MAIN1:\n                mainPhase1But.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case BATTLE:\n                battlePhaseBut.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case MAIN2:\n                mainPhase2But.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n            case END:\n                endPhaseBut.setStyle(OPPONENT_CURRENT_PHASE_STYLE);\n                break;\n        }\n    }\n\n    @FXML\n    public void drawPhase(ActionEvent event) {\n        gameController.nextPhase(Phase.DRAW);\n    }\n\n    @FXML\n    void standbyPhase(ActionEvent event) {\n        gameController.nextPhase(Phase.STANDBY);\n    }\n\n    @FXML\n    void mainPhase1(ActionEvent event) {\n        gameController.nextPhase(Phase.MAIN1);\n    }\n\n    @FXML\n    void battlePhase(ActionEvent event) {\n        gameController.nextPhase(Phase.BATTLE);\n    }\n\n    @FXML\n    void mainPhase2(ActionEvent event) {\n        gameController.nextPhase(Phase.MAIN2);\n    }\n\n    @FXML\n    void endPhase(ActionEvent event) {\n        gameController.nextPhase(Phase.END);\n    }\n\n    @Override\n    public void initialize(URL location, ResourceBundle resources) {\n        myLP.setText(String.valueOf(gameController.getGame().getLifePoint(turn)));\n        myNickname.setText(gameController.getGame().getUser(turn).getNickname());\n        myProfile.setImage(gameController.getGame().getUser(turn).getProfileImage());\n        myUsername.setText(gameController.getGame().getUser(turn).getUsername());\n\n        opponentLP.setText(String.valueOf(gameController.getGame().getLifePoint(1 - turn)));\n        opponentNickname.setText(gameController.getGame().getUser(1 - turn).getNickname());\n        opponentProfile.setImage(gameController.getGame().getUser(1 - turn).getProfileImage());\n        opponentUsername.setText(gameController.getGame().getUser(1 - turn).getUsername());\n\n        initField();\n        intiFieldClick();\n        setMyGraveyardOnClick();\n        setOppGraveyardOnClick();\n    }\n\n    private void setOppGraveyardOnClick() {\n        oppGraveyard.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {\n            @Override\n            public void handle(MouseEvent event) {\n                showOppGraveyard();\n            }\n        });\n    }\n\n    private void showOppGraveyard() {\n        Stage stage = new Stage();\n        AnchorPane root = null;\n        GridPane showGraveyard = null;\n        try {\n            root = FXMLLoader.load(getClass().getResource(\"/fxml/graveyard.fxml\"));\n            showGraveyard = (GridPane) root.lookup(\"#showMyGraveyard\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        List<Card> graveyard = gameController.getGame().getBoard(1 - turn).getGraveyard();\n        for (int i = 0; i < graveyard.size(); i++) {\n            ImageView imageView = new ImageView();\n            imageView.setImage(graveyard.get(i).getImage());\n            showGraveyard.add(imageView, i, 0);\n        }\n\n        stage.setScene(new Scene(root));\n        stage.showAndWait();\n    }\n\n    private void setMyGraveyardOnClick() {\n        myGraveyard.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {\n            @Override\n            public void handle(MouseEvent event) {\n                showMyGraveyard();\n            }\n        });\n    }\n\n\n    public void showMyGraveyard() {\n        Stage stage = new Stage();\n        AnchorPane root = null;\n        GridPane showMyGraveyard = null;\n        try {\n            root = FXMLLoader.load(getClass().getResource(\"/fxml/graveyard.fxml\"));\n            showMyGraveyard = (GridPane) root.lookup(\"#showMyGraveyard\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        List<Card> graveyard = gameController.getGame().getBoard(turn).getGraveyard();\n        for (int i = 0; i < graveyard.size(); i++) {\n            ImageView imageView = new ImageView();\n            imageView.setImage(graveyard.get(i).getImage());\n            showMyGraveyard.add(imageView, i, 0);\n        }\n\n        stage.setScene(new Scene(root));\n        stage.showAndWait();\n    }\n\n    private void intiFieldClick() {\n        for (int i = 0; i < 5; i++) {\n            int finalI = i;\n            myMonsters.get(i).setOnMouseClicked(e -> {\n                if (myMonsters.get(finalI).getImage() == null)\n                    return;\n                switch (gameController.getGame().getPhase()) {\n                    case BATTLE:\n                        attacker = finalI;\n                        break;\n                    case MAIN1:\n                    case MAIN2:\n                        break;\n                }\n            });\n        }\n\n        for (int i = 0; i < 5; i++) {\n            int finalI = i;\n            oppMonsters.get(i).setOnMouseClicked(e -> {\n                if (oppMonsters.get(finalI).getImage() == null)\n                    return;\n                switch (gameController.getGame().getPhase()) {\n                    case BATTLE:\n                        if (attacker == -1)\n                            return;\n                        try {\n                            String result = gameController.attack(attacker, finalI);\n                            Alert.getInstance().successfulPrint(result);\n                            attacker = -1;\n                        } catch (Exception exception) {\n                            Alert.getInstance().errorPrint(exception.getMessage());\n                        }\n\n                        break;\n                    case MAIN1:\n                    case MAIN2:\n                        break;\n                }\n            });\n        }\n\n        opponentHand.setOnMouseClicked(e -> {\n            switch (gameController.getGame().getPhase()) {\n                case BATTLE:\n                    if (attacker == -1)\n                        return;\n                    try {\n                        String result = gameController.attackDirect(attacker);\n                        attacker = -1;\n                        Alert.getInstance().successfulPrint(result);\n                    } catch (Exception exception) {\n                        Alert.getInstance().errorPrint(exception.getMessage());\n                    }\n\n                    break;\n                case MAIN1:\n                case MAIN2:\n                    break;\n            }\n        });\n    }\n\n    private void initField() {\n        myMonsters.add(myMonster1);\n        myMonsters.add(myMonster2);\n        myMonsters.add(myMonster3);\n        myMonsters.add(myMonster4);\n        myMonsters.add(myMonster5);\n\n        mySpellTraps.add(mySpellTrap1);\n        mySpellTraps.add(mySpellTrap2);\n        mySpellTraps.add(mySpellTrap3);\n        mySpellTraps.add(mySpellTrap4);\n        mySpellTraps.add(mySpellTrap5);\n\n        oppMonsters.add(oppMonster1);\n        oppMonsters.add(oppMonster2);\n        oppMonsters.add(oppMonster3);\n        oppMonsters.add(oppMonster4);\n        oppMonsters.add(oppMonster5);\n\n        oppSpellTraps.add(opoSpellTrap1);\n        oppSpellTraps.add(opoSpellTrap2);\n        oppSpellTraps.add(opoSpellTrap3);\n        oppSpellTraps.add(opoSpellTrap4);\n        oppSpellTraps.add(opoSpellTrap5);\n\n        for (CardImageView imageView : myMonsters)\n            imageView.setGameView(this);\n        for (CardImageView imageView : mySpellTraps)\n            imageView.setGameView(this);\n        for (CardImageView imageView : oppMonsters)\n            imageView.setGameView(this);\n        for (CardImageView imageView : oppSpellTraps)\n            imageView.setGameView(this);\n    }\n\n    private void move(int currentX, int currentY, int destX, int destY, Node node) {\n        SequentialTransition sequentialTransition = new SequentialTransition();\n        sequentialTransition.setNode(node);\n        TranslateTransition translateTransition = new TranslateTransition();\n\n        translateTransition.setFromX(currentX);\n        translateTransition.setToX(destX);\n        translateTransition.setFromY(currentY);\n        translateTransition.setToY(destY);\n\n        sequentialTransition.getChildren().add(translateTransition);\n        sequentialTransition.play();\n    }\n\n    public void moveFromDeckToHand(Card card) {\n        CardImageView imageView = new CardImageView(this, card, true);\n        imageView.setFitHeight(Size.CARD_HEIGHT_IN_SHOP.getValue());\n        imageView.setFitWidth(Size.CARD_WIDTH_IN_SHOP.getValue());\n        int number = myHand.getChildren().size();\n\n        myHand.add(imageView, number, 0);\n\n        imageView.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {\n            @Override\n            public void handle(MouseEvent event) {\n                if (event.getButton().equals(MouseButton.SECONDARY)) {\n                    if (card instanceof Monster) setMonster(card, imageView);\n                    else if (card instanceof SpellTrap) setSpellTrap(card, imageView);\n                } else {\n                    if (card instanceof Monster) summonMonster(card, imageView);\n                    else if (card instanceof SpellTrap) activateSpellTrap(card, imageView);\n                }\n            }\n        });\n    }\n\n    public void moveFromOpponentDeckToHand(Card addedCard) {\n        CardImageView imageView = new CardImageView(this, addedCard, false);\n        imageView.setFitHeight(Size.CARD_HEIGHT_IN_SHOP.getValue());\n        imageView.setFitWidth(Size.CARD_WIDTH_IN_SHOP.getValue());\n        int number = opponentHand.getChildren().size();\n\n        opponentHand.add(imageView, number, 0);\n    }\n\n    private void activateSpellTrap(Card card, ImageView imageView) {\n        try {\n            gameController.activateEffect(turn, card, new CardAddress(Place.Hand, Owner.Me));\n        } catch (Exception e) {\n            Alert.getInstance().errorPrint(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    private void setSpellTrap(Card card, ImageView imageView) {\n        try {\n            gameController.set(turn, card);\n        } catch (Exception e) {\n            Alert.getInstance().errorPrint(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    private void summonMonster(Card card, ImageView imageView) {\n        try {\n            gameController.summon(turn, card);\n        } catch (Exception e) {\n            Alert.getInstance().errorPrint(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    private void setMonster(Card card, ImageView imageView) {\n        try {\n            gameController.set(turn, card);\n        } catch (Exception e) {\n            Alert.getInstance().errorPrint(e.getMessage());\n            e.printStackTrace();\n        }\n    }\n\n    public void updateOpponentMonsterZone() {\n        HashMap<Integer, MonsterController> monsterZone = gameController.getGame().getBoard(1 - turn).getMonsterZoneMap();\n        for (int i = 0; i < 5; i++) {\n            if (!monsterZone.containsKey(i)) {\n                CardImageView imageView = oppMonsters.get(i);\n                imageView.removeCard();\n            } else if (monsterZone.get(i).getPosition() == MonsterPosition.ATTACK) {\n                CardImageView imageView = oppMonsters.get(i);\n                imageView.addCard(monsterZone.get(i).getMonster(), true);\n                imageView.setRotate(180);\n            } else if (monsterZone.get(i).getPosition() == MonsterPosition.DEFENCE_UP) {\n                CardImageView imageView = oppMonsters.get(i);\n                imageView.addCard(monsterZone.get(i).getMonster(), true);\n                imageView.setRotate(90);\n            } else {\n                CardImageView imageView = oppMonsters.get(i);\n                imageView.addCard(monsterZone.get(i).getMonster(), false);\n                imageView.setRotate(90);\n            }\n        }\n\n    }\n\n    public void updateOpponentSpellTraps() {\n        HashMap<Integer, SpellTrapController> spellTrapZone = gameController.getGame().getBoard(1 - turn).getSpellTrapZoneMap();\n        for (int i = 0; i < 5; i++) {\n            if (!spellTrapZone.containsKey(i)) {\n                CardImageView imageView = oppSpellTraps.get(i);\n                imageView.removeCard();\n            } else if (spellTrapZone.get(i).getPosition() == SpellTrapPosition.UP) {\n                CardImageView imageView = oppSpellTraps.get(i);\n                imageView.addCard(spellTrapZone.get(i).getCard(), true);\n                imageView.setRotate(180);\n            } else {\n                CardImageView imageView = oppSpellTraps.get(i);\n                imageView.addCard(spellTrapZone.get(i).getCard(), false);\n            }\n        }\n    }\n\n    public void updateMyMonsterZone() {\n        HashMap<Integer, MonsterController> monsterZone = gameController.getGame().getBoard(turn).getMonsterZoneMap();\n        for (int i = 0; i < 5; i++) {\n            if (!monsterZone.containsKey(i)) {\n                CardImageView imageView = myMonsters.get(i);\n                imageView.removeCard();\n            } else if (monsterZone.get(i).getPosition() == MonsterPosition.ATTACK) {\n                CardImageView imageView = myMonsters.get(i);\n                imageView.addCard(monsterZone.get(i).getMonster(), true);\n            } else if (monsterZone.get(i).getPosition() == MonsterPosition.DEFENCE_UP) {\n                CardImageView imageView = myMonsters.get(i);\n                imageView.addCard(monsterZone.get(i).getMonster(), true);\n                imageView.setRotate(270);\n            } else {\n                CardImageView imageView = myMonsters.get(i);\n                imageView.addCard(monsterZone.get(i).getMonster(), false);\n                imageView.setRotate(270);\n            }\n        }\n\n    }\n\n    public void updateMySpellTraps() {\n        HashMap<Integer, SpellTrapController> spellTrapZone = gameController.getGame().getBoard(turn).getSpellTrapZoneMap();\n        for (int i = 0; i < 5; i++) {\n            if (!spellTrapZone.containsKey(i)) {\n                CardImageView imageView = mySpellTraps.get(i);\n                imageView.removeCard();\n            } else if (spellTrapZone.get(i).getPosition() == SpellTrapPosition.UP) {\n                CardImageView imageView = mySpellTraps.get(i);\n                imageView.addCard(spellTrapZone.get(i).getCard(), true);\n            } else {\n                CardImageView imageView = mySpellTraps.get(i);\n                imageView.addCard(spellTrapZone.get(i).getCard(), false);\n            }\n        }\n    }\n\n    public void updateMyHand() {\n        List<Card> hand = gameController.getGame().getBoard(turn).getHand();\n        myHand.getChildren().clear();\n        for (Card card : hand) {\n            ImageView imageView = new fxmlController.CardImageView(this, card, true);\n            imageView.setFitHeight(Size.CARD_HEIGHT_IN_SHOP.getValue());\n            imageView.setFitWidth(Size.CARD_WIDTH_IN_SHOP.getValue());\n            int number = myHand.getChildren().size();\n\n            myHand.add(imageView, number, 0);\n\n            imageView.addEventHandler(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {\n                @Override\n                public void handle(MouseEvent event) {\n                    if (event.getButton().equals(MouseButton.SECONDARY)) {\n                        if (card instanceof Monster) setMonster(card, imageView);\n                        else if (card instanceof SpellTrap) setSpellTrap(card, imageView);\n                    } else {\n                        if (card instanceof Monster) summonMonster(card, imageView);\n                        else if (card instanceof SpellTrap) activateSpellTrap(card, imageView);\n                    }\n                }\n            });\n        }\n    }\n\n    public void updateOpponentHand() {\n        List<Card> hand = gameController.getGame().getBoard(1 - turn).getHand();\n        while (hand.size() != opponentHand.getChildren().size()) {\n            if (opponentHand.getChildren().size() < hand.size()) {\n                int number = opponentHand.getChildren().size();\n                ImageView imageView = new ImageView();\n                imageView.setImage(Card.getUnknownImage());\n                imageView.setFitHeight(Size.CARD_HEIGHT_IN_SHOP.getValue());\n                imageView.setFitWidth(Size.CARD_WIDTH_IN_SHOP.getValue());\n                opponentHand.add(imageView, number, 0);\n            } else if (opponentHand.getChildren().size() > hand.size()) {\n                opponentHand.getChildren().remove(0);\n            }\n        }\n    }\n\n    public void escape() {\n        Stage stage = new Stage();\n        VBox root;\n        Button yes;\n        Button no;\n        try {\n            root = FXMLLoader.load(getClass().getResource(\"/fxml/askSurrender.fxml\"));\n            yes = (Button) root.lookup(\"#yes\");\n            no = (Button) root.lookup(\"#no\");\n        } catch (IOException e) {\n            Label label = new Label(\"want to surrender?\");\n            yes = new Button(\"yes\");\n            no = new Button(\"no\");\n            HBox hBox = new HBox(yes, no);\n            hBox.setSpacing(5);\n            hBox.setAlignment(Pos.CENTER);\n            root = new VBox(label, hBox);\n            root.setSpacing(5);\n            root.setAlignment(Pos.CENTER);\n        }\n        yes.setOnAction(e -> {\n            gameController.surrender();\n            stage.close();\n        });\n        no.setOnAction(e -> {\n            stage.close();\n        });\n        stage.setScene(new Scene(root));\n        stage.showAndWait();\n    }\n\n\n    public void updateLifePoint() {\n        myLP.setText(String.valueOf(gameController.getGame().getLifePoint(turn)));\n        opponentLP.setText(String.valueOf(gameController.getGame().getLifePoint(1 - turn)));\n    }\n\n    public void updateMyGraveyard(Card card) {\n        myGraveyard.setImage(card.getImage());\n    }\n\n    public void updateOppGraveyard(Card card) {\n        oppGraveyard.setImage(card.getImage());\n    }\n\n\n    class CardImageView extends ImageView {\n        Card card;\n        boolean isVisible;\n\n        public CardImageView(Card card) {\n            this(card, true);\n        }\n\n        public CardImageView(Card card, boolean isVisible) {\n            this.card = card;\n            this.isVisible = isVisible;\n            if (isVisible)\n                setImage(card.getImage());\n            else\n                setImage(Card.getUnknownImage());\n\n            setOnMouseEntered(e -> {\n                if (isVisible) {\n                    cardInfo.setImage(card.getImage());\n                    cardDetails.setText(card.getDescription());\n                } else {\n                    cardInfo.setImage(Card.getUnknownImage());\n                    cardDetails.setText(\"\");\n                }\n            });\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/fxmlController/GameView.java b/src/main/java/fxmlController/GameView.java
--- a/src/main/java/fxmlController/GameView.java	(revision 546a0a4cace73d225080e9b20a2c7c5a480bc629)
+++ b/src/main/java/fxmlController/GameView.java	(date 1625908382199)
@@ -111,7 +111,7 @@
     private CardImageView myMonster4;
 
     @FXML
-    private ImageView mySpellTrap5;
+    private CardImageView mySpellTrap5;
 
     @FXML
     private CardImageView mySpellTrap3;
@@ -714,33 +714,4 @@
     public void updateOppGraveyard(Card card) {
         oppGraveyard.setImage(card.getImage());
     }
-
-
-    class CardImageView extends ImageView {
-        Card card;
-        boolean isVisible;
-
-        public CardImageView(Card card) {
-            this(card, true);
-        }
-
-        public CardImageView(Card card, boolean isVisible) {
-            this.card = card;
-            this.isVisible = isVisible;
-            if (isVisible)
-                setImage(card.getImage());
-            else
-                setImage(Card.getUnknownImage());
-
-            setOnMouseEntered(e -> {
-                if (isVisible) {
-                    cardInfo.setImage(card.getImage());
-                    cardDetails.setText(card.getDescription());
-                } else {
-                    cardInfo.setImage(Card.getUnknownImage());
-                    cardDetails.setText("");
-                }
-            });
-        }
-    }
 }
\ No newline at end of file
Index: src/main/java/model/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\n\nimport controller.*;\nimport exceptions.FullMonsterZone;\nimport exceptions.FullSpellTrapZone;\nimport exceptions.MonsterNotFoundException;\nimport exceptions.SpellTrapNotFoundException;\nimport model.cards.Card;\nimport model.cards.SpellTrap;\nimport model.cards.monster.Monster;\nimport model.cards.spell.Spell;\n\nimport java.util.*;\n\npublic class Board {\n    public final static int CARD_NUMBER_IN_ROW = 5;\n    public final static int INITIAL_CARDS = 5;\n    private List<Card> deck;\n    private HashMap<Integer, MonsterController> monstersZone;\n    private HashMap<Integer, SpellTrapController> spellTrapZone;\n    private List<Card> graveyard;\n    private List<Card> hand;\n    private SpellController fieldZone;\n    private GameController gameController;\n    private int myTurn = -1;\n\n    public Board(GameController gameController, Deck deck) {\n        initDeck(deck);\n        setGameController(gameController);\n    }\n\n    public void initBoard() {\n        initMonstersZone();\n        initSpellTrapZone();\n        initGraveyard();\n        initHand();\n        initFieldZone();\n    }\n\n    public int getMonsterZoneLastEmpty() {\n        return monstersZone.size();\n    }\n\n    public int getSpellTrapZoneLastEmpty() {\n        return spellTrapZone.size();\n    }\n\n    public HashMap<Integer, MonsterController> getMonsterZoneMap() {\n        return monstersZone;\n    }\n\n    public HashMap<Integer, SpellTrapController> getSpellTrapZoneMap() {\n        return spellTrapZone;\n    }\n\n    public List<Card> getDeck() {\n        return deck;\n    }\n\n    public Collection<MonsterController> getMonstersZone() {\n        return monstersZone.values();\n    }\n\n    public MonsterController getMonsterByIndex(int index) {\n        if (monstersZone.containsKey(index))\n            return monstersZone.get(index);\n        return null;\n    }\n\n    public Collection<SpellTrapController> getSpellTrapZone() {\n        return spellTrapZone.values();\n    }\n\n    public SpellTrapController getSpellTrapByIndex(int index) {\n        if (spellTrapZone.containsKey(index))\n            return spellTrapZone.get(index);\n        return null;\n    }\n\n    public List<Card> getGraveyard() {\n        return graveyard;\n    }\n\n    public List<Card> getHand() {\n        return hand;\n    }\n\n    public SpellController getFieldZone() {\n        return fieldZone;\n    }\n\n    private void initDeck(Deck deck) {\n        ArrayList<String> mainDeck = deck.getMainDeck();\n        this.deck = new ArrayList<>();\n\n        for (String cardName : mainDeck) {\n            this.deck.add(Card.getCard(cardName));\n        }\n\n        Collections.shuffle(this.deck);\n    }\n\n    private void setGameController(GameController gameController) {\n        this.gameController = gameController;\n    }\n\n    private void initMonstersZone() {\n        this.monstersZone = new HashMap<>();\n    }\n\n    private void initSpellTrapZone() {\n        this.spellTrapZone = new HashMap<>();\n    }\n\n    private void initGraveyard() {\n        this.graveyard = new ArrayList<>();\n    }\n\n    private void initHand() {\n        hand = new ArrayList<>();\n        for (int i = 0; i < INITIAL_CARDS; i++)\n            addCardToHand();\n    }\n\n    private void initFieldZone() {\n        fieldZone = null;\n    }\n\n    private Board getOtherBoard() {\n        if (gameController.getGame().getOtherBoard() != this)\n            return gameController.getGame().getOtherBoard();\n        else\n            return gameController.getGame().getThisBoard();\n    }\n\n    private int getMyTurn() {\n        if (myTurn != -1)\n            return myTurn;\n        if (gameController.getGame().getBoard(0) == this)\n            myTurn = 0;\n        else\n            myTurn = 1;\n        return myTurn;\n    }\n\n    public Card addCardToHand() {\n        if (this.deck.size() == 0)\n            return null;\n        Card addedCard = this.deck.remove(0);\n        hand.add(addedCard);\n        gameController.getViews()[getMyTurn()].moveFromDeckToHand(addedCard);\n        gameController.getViews()[1 - getMyTurn()].moveFromOpponentDeckToHand();\n        return addedCard;\n    }\n\n    public void addCardToHand(Card card) {\n        hand.add(card);\n    }\n\n    public MonsterController putMonster(Monster monster, MonsterPosition position) throws MonsterNotFoundException, FullMonsterZone {\n        if (!hand.contains(monster)) {\n            throw new MonsterNotFoundException();\n        }\n        int lastEmpty = 0;\n        while (lastEmpty < CARD_NUMBER_IN_ROW && monstersZone.containsKey(lastEmpty)) {\n            lastEmpty++;\n        }\n        if (lastEmpty >= CARD_NUMBER_IN_ROW) {\n            throw new FullMonsterZone();\n        }\n        hand.remove(monster);\n        CardAddress monsterAddress = new CardAddress(Place.MonsterZone, Owner.Me, lastEmpty);\n        monstersZone.put(lastEmpty, MonsterController.getInstance(gameController, monster, position, monsterAddress));\n        return monstersZone.get(lastEmpty);\n    }\n\n    public void shuffleDeck() {\n        Collections.shuffle(this.deck);\n    }\n\n    public SpellTrapController putSpellTrap(SpellTrap spellTrap, SpellTrapPosition position) throws SpellTrapNotFoundException, FullSpellTrapZone {\n        if (!hand.contains(spellTrap)) {\n            throw new SpellTrapNotFoundException();\n        }\n        int lastEmpty = 0;\n        while (lastEmpty < CARD_NUMBER_IN_ROW && spellTrapZone.containsKey(lastEmpty)) {\n            lastEmpty++;\n        }\n        if (lastEmpty >= CARD_NUMBER_IN_ROW) {\n            throw new FullSpellTrapZone();\n        }\n        hand.remove(spellTrap);\n        spellTrapZone.put(lastEmpty, SpellTrapController.getInstance(gameController, spellTrap, position, getMyTurn()));\n        return spellTrapZone.get(lastEmpty);\n    }\n\n    public void removeMonster(int index) {\n        if (!monstersZone.containsKey(index))\n            return;\n        graveyard.add(monstersZone.get(index).getCard());\n        gameController.getViews()[getMyTurn()].updateMyGraveyard(monstersZone.get(index).getCard());\n        gameController.getViews()[1 - getMyTurn()].updateOppGraveyard(monstersZone.get(index).getCard());\n        monstersZone.remove(index);\n    }\n\n    public void removeMonsterWithoutAddingToGraveyard(Monster monster) {\n        for (Integer index : monstersZone.keySet()) {\n            if (monstersZone.get(index).getMonster().equals(monster)) {\n                monstersZone.remove(index);\n                return;\n            }\n        }\n    }\n\n    public void removeMonster(MonsterController monster) {\n        for (Integer index : monstersZone.keySet()) {\n            if (monstersZone.get(index) == monster) {\n                removeMonster(index);\n                return;\n            }\n        }\n    }\n\n    public int getNumberOfMonstersINGraveyard() {\n        int count = 0;\n        for (Card card : graveyard) {\n            if (card instanceof Monster)\n                count++;\n        }\n\n        return count;\n    }\n\n    public void removeAllMonsters() {\n        monstersZone.clear();\n    }\n\n    public void removeSpellTrap(int index) {\n        if (!spellTrapZone.containsKey(index))\n            return;\n        graveyard.add(spellTrapZone.get(index).getCard());\n        gameController.getViews()[getMyTurn()].updateMyGraveyard(spellTrapZone.get(index).getCard());\n        gameController.getViews()[1 - getMyTurn()].updateOppGraveyard(spellTrapZone.get(index).getCard());\n        spellTrapZone.remove(index);\n    }\n\n    public void removeSpellTrap(SpellTrapController spellTrap) {\n        for (Integer index : spellTrapZone.keySet()) {\n            if (spellTrapZone.get(index) == spellTrap) {\n                removeSpellTrap(index);\n                return;\n            }\n        }\n    }\n\n    public void removeAllSpellTraps() {\n        spellTrapZone.clear();\n    }\n\n    public void standByPhase() {\n        for (SpellTrapController spellTrap : this.spellTrapZone.values()) {\n            spellTrap.standBy();\n        }\n    }\n\n    public int getMonsterZoneNumber() {\n        return monstersZone.size();\n    }\n\n    public boolean canDirectAttack() {\n        return true;\n    }\n\n    public int getSpellTrapZoneNumber() {\n        return spellTrapZone.size();\n    }\n\n    public SpellController putFiled(Spell spell) {\n        Board otherBoard = getOtherBoard();\n        otherBoard.fieldZone = null;\n        this.fieldZone = SpellController.getInstance(gameController, spell, SpellTrapPosition.UP);\n        return this.fieldZone;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/model/Board.java b/src/main/java/model/Board.java
--- a/src/main/java/model/Board.java	(revision 546a0a4cace73d225080e9b20a2c7c5a480bc629)
+++ b/src/main/java/model/Board.java	(date 1625908449044)
@@ -149,7 +149,7 @@
         Card addedCard = this.deck.remove(0);
         hand.add(addedCard);
         gameController.getViews()[getMyTurn()].moveFromDeckToHand(addedCard);
-        gameController.getViews()[1 - getMyTurn()].moveFromOpponentDeckToHand();
+        gameController.getViews()[1 - getMyTurn()].moveFromOpponentDeckToHand(addedCard);
         return addedCard;
     }
 
